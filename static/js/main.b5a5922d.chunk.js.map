{"version":3,"sources":["assets/star_wars_logo.png","context/CreateContext.js","utility/Loader.js","utility/ErrorTemplate.js","components/ScatterChart.js","constants/UrlConstants.js","components/DropDown.js","components/StarWars.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StarWarContext","createContext","StarWarsContextProvider","props","React","useState","selectedSpeciesObj","setSelectedSpeciesObj","Provider","value","children","Loading","type","color","height","width","ErrorTemplate","className","colors","scaleOrdinal","schemeCategory10","range","ScatterPlot","useContext","loading","setLoading","chartData","setChartData","errorMessage","setErrorMessage","useEffect","loadPeople","peopleResponse","people","forEach","url","urlArray","split","newUrl","join","console","log","push","getPeopleData","Promise","all","then","allPeopleData","data","res","mass","x","y","z","name","a","gender","b","catch","err","resolve","reject","axios","get","CustomTooltip","active","payload","margin","top","right","bottom","left","dataKey","unit","position","style","textAnchor","offset","angle","cursor","strokeDasharray","content","fill","map","entry","index","key","length","BASE_URL","SPECIES_URL","useStyles","makeStyles","theme","formControl","spacing","minWidth","selectEmpty","marginTop","SimpleSelect","classes","species","setSpecies","loadSpecies","speciesResponse","urlRes","getData","allSpeciesData","flat","results","FormControl","variant","InputLabel","id","Select","labelId","onChange","e","event","find","selected","target","MenuItem","StarWarComponent","src","logo","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b5a5922d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star_wars_logo.677d897f.png\";","import React , {createContext} from 'react';\nexport const StarWarContext=createContext();\n export const StarWarsContextProvider = (props)=>{\n \n    const [selectedSpeciesObj, setSelectedSpeciesObj] = React.useState();\n\n    return (\n    <StarWarContext.Provider value={[selectedSpeciesObj, setSelectedSpeciesObj]}>\n    {props.children}\n    </StarWarContext.Provider>\n    )\n };\n \n","import React from 'react';\nimport Loader from 'react-loader-spinner';\n\nexport const Loading = () => {\n    return (\n        <Loader\n            type=\"ThreeDots\"\n            color=\"#00BFFF\"\n            height={100}\n            width={100}\n        />\n    );\n}","/**\n * Error component which accepts props and export template with props value .\n * \n * @component\n * @example\n * return (\n *   <div>error message</div>\n * )\n */\nimport React from 'react';\nexport const ErrorTemplate = (props) => {\n   return (\n      <div className=\"error-message\">{props.value}</div>\n\n   )\n\n}","/**\n * Component for showing details of the people data.\n * \n * @component\n * @example\n * const data = [{x:200 , y:300}]\n * return (\n *   <ScatterChart>\n * <Scatter data={chartData}</Scatter>\n * </ScatterChart>\n * )\n */\nimport React, { useContext, useEffect ,useState} from 'react';\nimport {\n    ScatterChart, Scatter, XAxis, YAxis, Tooltip, Cell, Label\n} from 'recharts';\nimport axios from 'axios';\nimport { scaleOrdinal } from 'd3-scale';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport { StarWarContext } from '../context/CreateContext'\nimport { Loading } from '../utility/Loader';\nimport './StarWarsStyle.css';\nimport { ErrorTemplate } from '../utility/ErrorTemplate'\n\n\nconst colors = scaleOrdinal(schemeCategory10).range();\n\nexport default function ScatterPlot() {\n    const [selectedSpeciesObj] = useContext(StarWarContext);\n    const [loading, setLoading] = useState(false);\n    const [chartData, setChartData] = useState([]);\n    const [errorMessage, setErrorMessage] = useState(false);\n    useEffect(() => {\n        loadPeople();\n    }, [selectedSpeciesObj])\n\n\n    /** retrieving people's data from multiple people API and setting chartData  */\n    const loadPeople = () => {\n        let peopleResponse = [];\n        setLoading(true);\n        selectedSpeciesObj && selectedSpeciesObj.people.forEach(url => {\n            const urlArray= url.split('/');\n            urlArray[0]='https:';\n           const newUrl= urlArray.join('/')\n            console.log(urlArray)\n            peopleResponse.push(getPeopleData(newUrl))\n        })\n        Promise.all(peopleResponse).then(allPeopleData => {\n            let data = [];\n            allPeopleData && allPeopleData.forEach((res) => {\n                \n                /**setting the 'unknown' value in data to 0 so as to plot the point */\n                const height = res.height !== 'unknown' ? res.height.split(',').join('') : 0;\n                const mass = res.mass !== 'unknown' ? res.mass.split(',').join('') : 0;\n                data.push({ x: height, y: mass, z: res.name, a: res.gender, b: res.mass });\n                setChartData(data);\n            })\n            setLoading(false);\n        }).catch((err) => {\n            setErrorMessage(true);\n            console.log(\"Something went wrong. Please try again\");\n            setLoading(false);\n        })\n    }\n     /** @param{string}  URL\n         @return{promise}  promise value\n     */\n    const getPeopleData = (url) => {\n        return new Promise((resolve, reject) => {\n            axios.get(url)\n                .then(res => {\n                    resolve(res.data);\n                }).catch((err) => {\n                    reject(err);\n                })\n        })\n    }\n\n    /**custom ToolTip function which accepts the payload as parametres and\n      returns the element containing all details of people data\n      @param{array} payload   response from people api\n      @param{boolean} active   \n      @return{html element } \n      **/\n    const CustomTooltip = ({ active, payload }) => {\n        if (active) {\n            return (\n                <div className=\"custom-tooltip\">\n                    <div>\n                        <p className=\"name\"><b>Name</b>: {payload[0].payload.z}</p>\n                        <p className=\"gender\"><b>Gender</b>: {payload[0].payload.a}</p>\n                        <p className=\"height\"><b>Height</b>: {payload[0].value}</p>\n                        <p className=\"mass\"><b>Mass</b>: {payload[0].payload.b}</p>\n                    </div>\n                </div>\n            );\n        }\n        return null;\n    }\n\n    return (\n        <div className=\"card plot-card\">\n            <div className=\"card-body \">\n                {errorMessage ? <ErrorTemplate value=\"Fetch People data failed\" /> :\n                    !loading ?\n                        <ScatterChart\n                            width={500}\n                            height={440}\n                            margin={{\n                                top: 20, right: 20, bottom: 20, left: 20,\n                            }}\n                        >\n                            <XAxis type=\"number\" dataKey=\"x\" name=\"height\" unit=\"cm\">\n                                <Label value=\"Height\" position=\"center\" style={{ textAnchor: 'middle' }} offset={100} />\n                            </XAxis>\n                            <YAxis type=\"number\" dataKey=\"y\" name=\"mass\" unit=\"kg\">\n                                <Label value=\"Mass\" position=\"left\" style={{ textAnchor: 'middle' }} offset={10} angle={270} />\n                            </YAxis>\n\n                            <Tooltip cursor={{ strokeDasharray: '3 3' }} content={<CustomTooltip />} />\n                            <Scatter data={chartData} fill=\"#8884d8\">\n                                {\n                                    chartData.map((entry, index) => <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />)\n                                }\n                            </Scatter>\n                        </ScatterChart> : <Loading />\n                }\n            </div>\n        </div>\n    );\n\n}","export const BASE_URL = 'https://swapi.dev/api/';\n\nexport const SPECIES_URL = [\n    `${BASE_URL}species?page=1`,\n    `${BASE_URL}species?page=2`,\n    `${BASE_URL}species?page=3`,\n    `${BASE_URL}species?page=4`,\n];","/** dropdown component showing list of species data in dropdown.*/\n\nimport React, { useEffect, useContext, useState } from 'react';\nimport axios from 'axios'\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { Loading } from '../utility/Loader';\nimport { SPECIES_URL } from '../constants/UrlConstants';\nimport { StarWarContext } from '../context/CreateContext';\nimport { ErrorTemplate } from '../utility/ErrorTemplate'\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nexport default function SimpleSelect() {\n    const classes = useStyles();\n    const [species, setSpecies] = useState('');\n    const [selectedSpeciesObj, setSelectedSpeciesObj] = useContext(StarWarContext);\n    const [loading, setLoading] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(false);\n\n    useEffect(() => {\n        loadSpecies();\n    }, [])\n\n    /** reitreving species data from multiple species API and setting species data **/\n\n    const loadSpecies = () => {\n        let speciesResponse = [];\n        setLoading(true);\n        SPECIES_URL.forEach(urlRes => {\n            speciesResponse.push(getData(urlRes));\n        })\n\n        Promise.all(speciesResponse).then(allSpeciesData => {\n            setSpecies(allSpeciesData.flat());\n            console.log(allSpeciesData);\n            setSelectedSpeciesObj(allSpeciesData[0][0]);\n            setLoading(false);\n        }).catch((err) => {\n            setErrorMessage(true);\n            console.log(\"Something went wrong. Please try again\");\n            setLoading(false);\n        })\n    }\n    /** @param{string}  URL\n        @return{promise}  promise value\n        */\n    const getData = (url) => {\n        return new Promise((resolve, reject) => {\n            axios.get(url)\n                .then(res => {\n                    resolve(res.data.results);\n                }).catch((err) => {\n                    reject(err);\n                })\n        })\n    }\n    /** onChnage function which returns selected value from dropdown list\n     * @param{object} event\n     * @return{object} selectedSpeciesObject from dropdown \n     */\n    const handleChange = (event) => {\n        setSelectedSpeciesObj(species.find(selected => selected.name === event.target.value));\n    };\n    return (\n        <div>\n            {errorMessage ? <ErrorTemplate value=\"Fetch species data failed\" /> :\n                !loading ?\n                    <FormControl variant=\"filled\" className={classes.formControl}>\n                        <InputLabel id=\"demo-simple-select-filled-label\">{selectedSpeciesObj ? selectedSpeciesObj.name : ''}</InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-filled-label\"\n                            id=\"demo-simple-select-filled\"\n                            value={species}\n                            onChange={(e) => handleChange(e)}>\n                            {species && species.map((res, index) =>\n                                <MenuItem key={index} value={res.name}>{res.name}</MenuItem>\n                            )}\n                        </Select>\n                    </FormControl> :\n                    <Loading />\n            }\n        </div>\n    );\n}","/**\n * main component which loads dropdown and scatterPlot components.\n * \n * @component\n * @example\n * return (\n *   <ScatterChart>\n * <SimpleSelect></SimpleSelect>\n * <ScatterPlot></ScatterPlot>\n * )\n */\nimport React from 'react';\nimport ScatterPlot from './ScatterChart';\nimport SimpleSelect from './DropDown'\nimport { StarWarsContextProvider } from '../context/CreateContext';\nimport logo from '../assets/star_wars_logo.png';\n\nimport './StarWarsStyle.css';\n\nexport const StarWarComponent = (props) => {\n\n    return (\n        <div className=\"main-container\">\n            <div className=\"card-heading col-sm-12 col-xs-12 col-md-12\">\n                <div className=\"logo\">\n                    <img src={logo} width=\"120px\" height=\"120px\" alt=\"Star Wars\"/>\n                    <p className=\"app-description\">Graphical representation of different star wars species selected from dropdown</p>\n                </div>\n            </div>\n            <StarWarsContextProvider>\n            <div className='select-option'>\n                <label className='dropdown-header'>Pick a Species</label>\n                \n                    <SimpleSelect></SimpleSelect>\n                    </div>\n                    <ScatterPlot></ScatterPlot>\n                </StarWarsContextProvider>\n            \n        </div>\n\n    )\n\n}","import React from 'react';\nimport './App.css';\nimport { StarWarComponent } from './components/StarWars';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StarWarComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}